generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==============================
// 核心业务表
// ==============================

// User表 - User账号(老板账号)
model User {
  id                 String    @id @default(uuid())
  email              String    @unique
  passwordHash       String
  name               String?
  phone              String?
  emailVerifiedAt    DateTime?
  loginFailureCount  Int       @default(0)
  lastLoginFailureAt DateTime?
  lockedUntil        DateTime?
  lockReason         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organizations      Organization[]
  emailVerifications EmailVerification[]
  loginAttempts      LoginAttempt[]
  refreshTokens      RefreshToken[]
  auditLogs          AuditLog[]

  @@index([email])
}

// Organization表 - 店铺
model Organization {
  id          String      @id @default(uuid())
  userId      String
  parentOrgId String?
  orgName     String
  orgType     OrgType
  productType ProductType
  description String?     @db.Text
  location    String?
  phone       String?
  email       String?
  status      OrgStatus   @default(ACTIVE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User           @relation(fields: [userId], references: [id])
  parent   Organization?  @relation("OrgHierarchy", fields: [parentOrgId], references: [id])
  children Organization[] @relation("OrgHierarchy")
  accounts Account[]
  devices  Device[]

  @@index([userId])
  @@index([parentOrgId])
  @@index([orgType])
  @@index([productType])
  @@index([status])
}

enum OrgType {
  MAIN
  BRANCH
  FRANCHISE
}

enum ProductType {
  beauty
  fb
}

enum OrgStatus {
  ACTIVE
  SUSPENDED
  DELETED
}

// Account表 - 操作账号
model Account {
  id             String        @id @default(uuid())
  orgId          String
  accountType    AccountType
  productType    ProductType
  username       String?       @unique
  passwordHash   String?
  employeeNumber String
  pinCodeHash    String
  name           String?
  email          String?
  phone          String?
  createdBy      String
  status         AccountStatus @default(ACTIVE)
  lastLoginAt    DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organization    Organization   @relation(fields: [orgId], references: [id])
  createdAccounts Account[]      @relation("AccountCreator")
  creator         Account?       @relation("AccountCreator", fields: [createdBy], references: [id])
  loginAttempts   LoginAttempt[]
  refreshTokens   RefreshToken[]
  auditLogs       AuditLog[]

  @@unique([orgId, employeeNumber, status], name: "unique_active_employee")
  @@index([orgId])
  @@index([username])
  @@index([status])
  @@index([accountType])
}

enum AccountType {
  OWNER
  MANAGER
  STAFF
}

enum AccountStatus {
  ACTIVE
  SUSPENDED
  DELETED
}

// Device表 - 设备管理
model Device {
  id                String       @id @default(uuid())
  orgId             String
  deviceType        DeviceType
  deviceName        String?
  activationCode    String       @unique
  status            DeviceStatus @default(PENDING)
  activatedAt       DateTime?
  lastActiveAt      DateTime?
  expiresAt         DateTime?
  dormantSince      DateTime?
  deviceFingerprint Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organization Organization @relation(fields: [orgId], references: [id])
  auditLogs    AuditLog[]

  @@index([orgId])
  @@index([status])
  @@index([activationCode])
}

enum DeviceType {
  POS
  KIOSK
  TABLET
}

enum DeviceStatus {
  PENDING
  ACTIVE
  DORMANT
}

// EmailVerification表 - 邮箱验证
model EmailVerification {
  id                   String                 @id @default(uuid())
  userId               String
  verificationCodeHash String
  purpose              VerificationPurpose
  sentTo               String
  expiresAt            DateTime
  consumedAt           DateTime?
  attempts             Int                    @default(0)

  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([expiresAt])
}

enum VerificationPurpose {
  signup
  email_change
  password_reset
}

// LoginAttempt表 - 登录记录
model LoginAttempt {
  id                String    @id @default(uuid())
  loginType         LoginType
  userId            String?
  accountId         String?
  loginIdentifier   String
  organizationId    String?
  ipAddress         String
  userAgent         String?   @db.Text
  deviceFingerprint String?
  success           Boolean
  failureReason     String?

  attemptAt DateTime @default(now())

  user    User?    @relation(fields: [userId], references: [id])
  account Account? @relation(fields: [accountId], references: [id])

  @@index([userId])
  @@index([accountId])
  @@index([loginIdentifier])
  @@index([ipAddress])
  @@index([attemptAt])
  @@index([success])
}

enum LoginType {
  USER
  ACCOUNT
}

// RefreshToken表 - 刷新令牌
model RefreshToken {
  id               String      @id
  familyId         String?
  subjectUserId    String?
  subjectAccountId String?
  clientId         String
  organizationId   String?
  deviceId         String?
  deviceInfo       String?     @db.Text
  status           TokenStatus @default(ACTIVE)

  createdAt    DateTime  @default(now())
  expiresAt    DateTime
  rotatedAt    DateTime?
  revokedAt    DateTime?
  revokeReason String?
  lastSeenAt   DateTime  @default(now())

  user    User?    @relation(fields: [subjectUserId], references: [id])
  account Account? @relation(fields: [subjectAccountId], references: [id])

  @@index([familyId])
  @@index([subjectUserId])
  @@index([subjectAccountId])
  @@index([deviceId])
  @@index([status])
  @@index([lastSeenAt])
}

enum TokenStatus {
  ACTIVE
  ROTATED
  REVOKED
}

// Key表 - JWT签名密钥
model Key {
  kid        String    @id
  type       String
  status     KeyStatus @default(ACTIVE)
  privatePem String    @db.Text
  publicJwk  Json

  createdAt   DateTime  @default(now())
  activatedAt DateTime?
  retiredAt   DateTime?

  @@index([status])
}

enum KeyStatus {
  ACTIVE
  GRACE
  RETIRED
}

// AuditLog表 - 审计日志
model AuditLog {
  id             String   @id @default(uuid())
  at             DateTime @default(now())
  ip             String?
  userAgent      String?  @db.Text
  actorUserId    String?
  actorAccountId String?
  action         String
  subject        String?
  detail         Json?

  user    User?    @relation(fields: [actorUserId], references: [id])
  account Account? @relation(fields: [actorAccountId], references: [id])
  device  Device?  @relation(fields: [subject], references: [id])

  @@index([actorUserId])
  @@index([actorAccountId])
  @@index([action])
  @@index([at])
}
