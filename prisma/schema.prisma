generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                         String   @id @default(uuid())
  tenantId                   String
  email                      String   @unique
  passwordHash               String
  // 可选资料
  phone                      String?  @db.VarChar(32)
  address                    String?  @db.VarChar(255)
  subdomain                  String?  @unique
  // 业务类型（仅管理员可改）
  storeType                  StoreType @default(UNKNOWN)
  
  // 账号状态
  emailVerifiedAt            DateTime?
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  
  // v0.2.6 Login failure tracking and lockout
  loginFailureCount          Int      @default(0)
  lastLoginFailureAt         DateTime?
  lockedUntil                DateTime?
  lockReason                 String?  // "max_failures" | "security_violation"
  
  roles                      String[] @default([])
  
  // Relations
  emailVerifications         EmailVerification[]
  passwordResets             PasswordReset[]
  loginAttempts              LoginAttempt[]
}

model Client {
  id           String   @id       // client_id
  name         String
  redirectUris String[] // allowed redirect URIs
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model RefreshToken {
  id               String   @id
  familyId         String
  subjectUserId    String?
  subjectDeviceId  String?
  clientId         String
  status           String   @default("active") // active|rotated|revoked
  createdAt        DateTime @default(now())
  expiresAt        DateTime
  rotatedAt        DateTime?
  revokedAt        DateTime?
  revokeReason     String?

  @@index([familyId])
  @@index([subjectUserId])
  @@index([status])
}

model AuthorizationCode {
  id                   String   @id @default(uuid())
  clientId             String
  redirectUri          String
  codeChallenge        String
  codeChallengeMethod  String   @default("S256")
  scope                String?
  state                String?
  nonce                String?
  subjectUserId        String?
  tenantId             String?
  createdAt            DateTime @default(now())
  expiresAt            DateTime
  used                 Boolean  @default(false)
  usedAt               DateTime?

  @@index([clientId])
  @@index([subjectUserId])
  @@index([expiresAt])
}

model Key {
  kid          String   @id
  type         String   // 'RSA'
  status       String   // 'active' | 'grace' | 'retired'
  privatePem   String   // PKCS8 PEM（开发期可明文；生产建议加密）
  publicJwk    Json
  createdAt    DateTime @default(now())
  activatedAt  DateTime?
  retiredAt    DateTime?

  @@index([status])
}

model TenantClient {
  id                 String   @id @default(uuid())
  clientId           String
  tenantId           String
  allowedAudPrefixes String[] // 例如: ["tymoe-service:mopai", "tymoe-service:ploml"]
  allowedScopes      String[] // 例如: ["openid","profile"]
  defaultAud         String?  // 例如: "tymoe-service:mopai:tenant-dev"
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@unique([clientId, tenantId])
}

enum StoreType {
  UNKNOWN
  FRANCHISE // 加盟店
  BRANCH    // 分店
  DIRECT    // 直营店
}

model EmailVerification {
  id          String   @id @default(uuid())
  userId      String
  tenantId    String
  // "验证码"不明文存储：selector + hashedToken 最佳（避免库泄露）
  selector    String   @unique
  tokenHash   String
  purpose     String   // "signup" | "change_email" ...
  sentTo      String
  expiresAt   DateTime
  consumedAt  DateTime?
  attempts    Int      @default(0)
  createdAt   DateTime @default(now())
  
  // v0.2.6 10-minute code reuse tracking
  reuseWindowExpiresAt DateTime?
  lastSentAt           DateTime @default(now())
  resendCount          Int      @default(0)
  
  user        User     @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([expiresAt])
  @@index([reuseWindowExpiresAt])
}

model PasswordReset {
  id          String   @id @default(uuid())
  userId      String
  tenantId    String
  selector    String   @unique
  tokenHash   String
  sentTo      String
  expiresAt   DateTime
  consumedAt  DateTime?
  attempts    Int      @default(0)
  createdAt   DateTime @default(now())
  
  // v0.2.6 10-minute code reuse tracking
  reuseWindowExpiresAt DateTime?
  lastSentAt           DateTime @default(now())
  resendCount          Int      @default(0)
  
  user        User     @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([expiresAt])
  @@index([reuseWindowExpiresAt])
}

model LoginAttempt {
  id             String   @id @default(uuid())
  userId         String?  // null for non-existent users (anti-enumeration)
  email          String
  tenantId       String
  ipAddress      String
  userAgent      String?
  success        Boolean
  failureReason  String?  // "invalid_password" | "account_locked" | "captcha_required" | "captcha_failed"
  captchaUsed    Boolean  @default(false)
  attemptAt      DateTime @default(now())
  
  user           User?    @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([email])
  @@index([ipAddress])
  @@index([attemptAt])
  @@index([success])
}

model AuditLog {
  id          String   @id @default(uuid())
  at          DateTime @default(now())
  ip          String?
  userAgent   String?
  actorUserId String?
  action      String   // login_success / login_fail / authorize / token_issue / token_refresh / refresh_reuse / revoke / introspect / jwks_rotate / jwks_retire …
  subject     String?  // token_id / code_id / client_id / tenant_id …
  detail      Json?
}
